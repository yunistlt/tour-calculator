// src/ui/App.jsx
import React from 'react'
import { useAuth } from './store'

// -------------------- —É—Ç–∏–ª–∏—Ç—ã --------------------
const card = {
  background: '#fff',
  border: '1px solid #e7eef6',
  borderRadius: 12,
  padding: 16,
}

// —Ç–∏–ø—ã —É—Å–ª—É–≥
const TYPE_PER_PERSON = 'PER_PERSON'
const TYPE_PER_GROUP  = 'PER_GROUP'
const TYPE_PER_TOUR   = 'PER_TOUR' // –Ω–∞ –≤–µ—Å—å —Ç—É—Ä (–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ)

// –∫—Ä–∞—Å–∏–≤–æ–µ —á–∏—Å–ª–æ
const money = (x) => Number(x || 0).toFixed(2)

// -------------------- –ö–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç --------------------
export default function App(){
  const { userToken, user } = useAuth()

  // -------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–ø–∫–∏/–∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞ --------
  const [projectName, setProjectName] = React.useState('–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')

  // -------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø—Ä–æ—Ü–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞) --------
  const [settings, setSettings] = React.useState({ agent_markup_percent: 0 })
  const agentPct  = Number(settings?.agent_markup_percent ?? 0)
  const agentCoef = React.useMemo(() => 1 + agentPct/100, [agentPct])

  // -------- –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ --------
  const [services, setServices] = React.useState([])

  // -------- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—É—Ä–∞ --------
  const [days, setDays] = React.useState(1)
  const [singles, setSingles] = React.useState(0)   // –æ–¥–Ω–æ–º–µ—Å—Ç–Ω—ã–µ
  // –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 10 –¥–≤—É—Ö–º–µ—Å—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ => 20 - singles
  const maxAllowed = React.useMemo(() => Math.max(1, 20 - Number(singles || 0)), [singles])
  const [N, setN] = React.useState(2)               // —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const [description, setDescription] = React.useState('')

  // -------- –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ --------
  // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { byDay: {1:[{id,serviceId}], 2:[...]}, perTour:[{id,serviceId}] }
  const [items, setItems] = React.useState({
    byDay: { 1: [] },
    perTour: [],
  })

  // --- –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±–µ–∑ –∫—ç—à–∞) ---
  React.useEffect(() => {
    const url = `/api/public-settings?t=${Date.now()}`
    fetch(url, { cache: 'no-store' })
      .then(r => r.json())
      .then(d => {
        setSettings({ agent_markup_percent: Number(d?.agent_markup_percent ?? 0) })
      })
      .catch(() => setSettings({ agent_markup_percent: 0 }))
  }, [])

  // --- –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ (–±–µ–∑ –∫—ç—à–∞) ---
  React.useEffect(() => {
    const url = `/api/services?t=${Date.now()}`
    fetch(url, { cache: 'no-store' })
      .then(r => r.ok ? r.json() : [])
      .then(list => setServices(Array.isArray(list) ? list : []))
      .catch(() => setServices([]))
  }, [])

  // –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π ‚Äî –ø–æ–¥–≥–æ–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ –¥–Ω—è–º
  React.useEffect(() => {
    setItems(prev => {
      const next = { ...prev, byDay: { ...prev.byDay } }
      // —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–Ω–∏
      for (let d = 1; d <= days; d++) {
        if (!next.byDay[d]) next.byDay[d] = []
      }
      // —É–±—Ä–∞—Ç—å —Ö–≤–æ—Å—Ç–æ–≤—ã–µ –¥–Ω–∏
      Object.keys(next.byDay).forEach(k => {
        const d = Number(k)
        if (d > days) delete next.byDay[d]
      })
      return next
    })
  }, [days])

  // –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ ‚Äî –æ–±—Ä–µ–∑–∞–µ–º
  React.useEffect(() => {
    if (N > maxAllowed) setN(maxAllowed)
  }, [maxAllowed])

  // -------- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ --------
  function addServiceToDay(service, day) {
    setItems(prev => {
      const next = { ...prev, byDay: { ...prev.byDay } }
      if (!next.byDay[day]) next.byDay[day] = []
      next.byDay[day] = [...next.byDay[day], { id: cryptoRandom(), serviceId: service.id }]
      return next
    })
  }
  function addServiceAllDays(service) {
    setItems(prev => {
      const next = { ...prev, byDay: { ...prev.byDay } }
      for (let d = 1; d <= days; d++) {
        if (!next.byDay[d]) next.byDay[d] = []
        next.byDay[d] = [...next.byDay[d], { id: cryptoRandom(), serviceId: service.id }]
      }
      return next
    })
  }
  function addServicePerTour(service){
    setItems(prev => ({ ...prev, perTour: [...prev.perTour, { id: cryptoRandom(), serviceId: service.id }] }))
  }

  function removeItemFromDay(day, id){
    setItems(prev => {
      const next = { ...prev, byDay: { ...prev.byDay } }
      next.byDay[day] = (next.byDay[day] || []).filter(x => x.id !== id)
      return next
    })
  }

  function getServiceById(id){
    return services.find(s => s.id === id)
  }

  // -------- –∫–∞–ª—å–∫—É–ª—è—Ü–∏—è --------
  // –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 1 —á–µ–ª –∑–∞ –≤–µ—Å—å —Ç—É—Ä (–±–µ–∑ –∞–≥–µ–Ω—Ç–∞):
  //   —Å—É–º–º–∏—Ä—É–µ–º –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å:
  //     perPerson: —Å—É–º–º–∞ —Ü–µ–Ω (–Ω–∞ 1 —á–µ–ª)
  //     perGroup : —Å—É–º–º–∞ —Ü–µ–Ω / N
  //   + perTour (–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞ –≥—Ä—É–ø–ø—É): —Å—É–º–º–∞ / N
  const perPersonTotal = React.useMemo(() => {
    const participants = Number(N || 0)
    if (!participants) return 0

    let sumDays = 0
    for (let d = 1; d <= days; d++) {
      const dayItems = items.byDay[d] || []
      let dayPerPerson = 0
      let dayPerGroup  = 0
      dayItems.forEach(it => {
        const s = getServiceById(it.serviceId)
        if (!s) return
        if (s.type === TYPE_PER_PERSON) dayPerPerson += Number(s.price || 0)
        else if (s.type === TYPE_PER_GROUP) dayPerGroup += Number(s.price || 0)
        else if (s.type === TYPE_PER_TOUR) {
          // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –¥–Ω–µ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø–∞–ª–æ "–Ω–∞ –≤–µ—Å—å —Ç—É—Ä" ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç—É—Ç
        }
      })
      sumDays += dayPerPerson + (dayPerGroup / participants)
    }

    // —É—Å–ª—É–≥–∏ –Ω–∞ –≤–µ—Å—å —Ç—É—Ä: –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ / N
    const perTourSum = items.perTour.reduce((acc, it) => {
      const s = getServiceById(it.serviceId)
      return acc + Number(s?.price || 0)
    }, 0)

    return +(sumDays + (perTourSum / participants)).toFixed(2)
  }, [items, services, days, N])

  const groupTotal = React.useMemo(
    () => +(perPersonTotal * (Number(N) || 0)).toFixed(2),
    [perPersonTotal, N]
  )

  const perPersonWithAgent = React.useMemo(
    () => +((perPersonTotal || 0) * agentCoef).toFixed(2),
    [perPersonTotal, agentCoef]
  )

  const groupTotalWithAgent = React.useMemo(
    () => +((groupTotal || 0) * agentCoef).toFixed(2),
    [groupTotal, agentCoef]
  )

  const agentReward = React.useMemo(
    () => +((groupTotalWithAgent || 0) - (groupTotal || 0)).toFixed(2),
    [groupTotalWithAgent, groupTotal]
  )

  // -------------------- –†–µ–Ω–¥–µ—Ä --------------------
  return (
    <div className="page">

      <Topbar
        projectName={projectName}
        setProjectName={setProjectName}
        perPersonWithAgent={perPersonWithAgent}
        groupTotalWithAgent={groupTotalWithAgent}
        agentPct={agentPct}
      />

      <div className="content" style={{ display: 'grid', gridTemplateColumns: '280px 1fr 340px', gap: 16, padding: 16 }}>
        {/* –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ ‚Äî –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
        <LeftCatalog
          services={services}
          days={days}
          onAddDay={addServiceToDay}
          onAddAllDays={addServiceAllDays}
          onAddPerTour={addServicePerTour}
        />

        {/* –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –ü–ê–ù–ï–õ–¨ ‚Äî –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
        <CenterDays
          items={items}
          days={days}
          getServiceById={getServiceById}
          onRemove={removeItemFromDay}
        />

        {/* –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ ‚Äî –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Å —Ñ–∏–∫—Å–∞–º–∏ –≤–≤–æ–¥–∞) */}
        <RightPanel
          days={days}
          setDays={setDays}
          singles={singles}
          onSinglesChange={val => setSingles(Math.max(0, Math.min(10, Number(val || 0))))}
          N={N}
          maxAllowed={maxAllowed}
          onParticipantsChange={val => setN(Math.max(1, Math.min(maxAllowed, Number(val || 1))))}
          description={description}
          setDescription={setDescription}
          perPersonTotal={perPersonTotal}
          perPersonWithAgent={perPersonWithAgent}
          groupTotal={groupTotal}
          groupTotalWithAgent={groupTotalWithAgent}
          agentReward={agentReward}
          agentPct={agentPct}
        />
      </div>
    </div>
  )
}

// -------------------- –®–∞–ø–∫–∞ --------------------
function Topbar({ projectName, setProjectName, perPersonWithAgent, groupTotalWithAgent, agentPct }){
  return (
    <div style={{
      background: 'linear-gradient(135deg, #00B4DB, #0083B0)',
      color: '#fff',
      padding: '12px 16px',
      position: 'sticky',
      top: 0,
      zIndex: 5
    }}>
      <div style={{ display:'grid', gridTemplateColumns:'1fr auto auto', gap: 12, alignItems:'center' }}>
        <div style={{ display:'flex', gap:12, alignItems:'center' }}>
          <span style={{ fontSize:18, fontWeight:800 }}>üå¥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–≤–µ–Ω—Ç–æ–≤ –∏ —Ç—É—Ä–æ–≤</span>
          <input
            value={projectName}
            onChange={e=>setProjectName(e.target.value)}
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
            style={{
              background:'#ffffff22', color:'#fff', border:'1px solid #ffffff44',
              borderRadius:10, padding:'6px 10px', minWidth:220
            }}
          />
        </div>

        <div style={{ display:'flex', gap:10, alignItems:'center', justifyContent:'flex-end' }}>
          <button className="primary">+ –ù–æ–≤—ã–π</button>
          <button className="primary">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          <button className="secondary">üìÇ –û—Ç–∫—Ä—ã—Ç—å</button>
        </div>

        <div style={{ textAlign:'right', fontSize:13, lineHeight:1.3 }}>
          <div>–ó–∞ —Ç—É—Ä (–Ω–∞ —á–µ–ª, —Å –∞–≥–µ–Ω—Ç–æ–º): <b>{money(perPersonWithAgent)}</b></div>
          <div>–ò—Ç–æ–≥–æ –ø–æ –≥—Ä—É–ø–ø–µ (—Å –∞–≥–µ–Ω—Ç–æ–º): <b>{money(groupTotalWithAgent)}</b></div>
          <div>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: <b>{money(groupTotalWithAgent - (perPersonWithAgent * 0 + (groupTotalWithAgent/ (1 + agentPct/100))))}</b> ({agentPct}%)</div>
        </div>
      </div>
    </div>
  )
}

// -------------------- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞) --------------------
function LeftCatalog({ services, days, onAddDay, onAddAllDays, onAddPerTour }){
  // –¥–µ–ª–∏–º –Ω–∞ ¬´–Ω–∞ –≤–µ—Å—å —Ç—É—Ä¬ª –∏ ¬´–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ¬ª
  const perTour = services.filter(s => s.type === TYPE_PER_TOUR)
  const daily   = services.filter(s => s.type !== TYPE_PER_TOUR)

  return (
    <div style={{ position:'sticky', top:84, alignSelf:'start' }}>
      <div style={card}>
        <h4 style={{ marginTop:0 }}>–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</h4>

        {perTour.length > 0 && (
          <>
            <div style={{ opacity:.7, fontSize:12, margin:'8px 0' }}>–ù–∞ –≤–µ—Å—å —Ç—É—Ä</div>
            <div style={{ display:'grid', gap:10 }}>
              {perTour.map(s => (
                <ServiceRow key={s.id} service={s}
                  days={days}
                  mode="per_tour"
                  onAddDay={onAddDay}
                  onAddAllDays={onAddAllDays}
                  onAddPerTour={onAddPerTour}
                />
              ))}
            </div>
            <hr style={{ margin:'12px 0' }}/>
          </>
        )}

        <div style={{ opacity:.7, fontSize:12, margin:'8px 0' }}>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ</div>
        <div style={{ display:'grid', gap:10 }}>
          {daily.map(s => (
            <ServiceRow key={s.id} service={s}
              days={days}
              mode="daily"
              onAddDay={onAddDay}
              onAddAllDays={onAddAllDays}
              onAddPerTour={onAddPerTour}
            />
          ))}
        </div>
      </div>
    </div>
  )
}

function ServiceRow({ service, days, mode, onAddDay, onAddAllDays, onAddPerTour }){
  const [dayPick, setDayPick] = React.useState('all')
  const dayOptions = Array.from({length:days}, (_,i)=> i+1 )

  return (
    <div style={{ border:'1px solid #e7eef6', borderRadius:10, padding:10, display:'grid', gridTemplateColumns:'1fr auto auto', gap:8, alignItems:'center' }}>
      <div>
        <div style={{ fontWeight:600 }}>{service.name_ru}</div>
        <div style={{ opacity:.6, fontSize:12 }}>
          {service.type === TYPE_PER_PERSON && '–∑–∞ —á–µ–ª–æ–≤–µ–∫–∞ (–≤ –¥–µ–Ω—å)'}
          {service.type === TYPE_PER_GROUP  && '–∑–∞ –≥—Ä—É–ø–ø—É (–≤ –¥–µ–Ω—å)'}
          {service.type === TYPE_PER_TOUR   && '–∑–∞ –≥—Ä—É–ø–ø—É (–Ω–∞ –≤–µ—Å—å —Ç—É—Ä)'}
        </div>
      </div>

      {mode === 'daily' ? (
        <>
          <select value={dayPick} onChange={e=>setDayPick(e.target.value)} style={{ height:36 }}>
            <option value="all">‚Äî –≤—ã–±—Ä–∞—Ç—å –¥–Ω–∏</option>
            {dayOptions.map(d => <option key={d} value={String(d)}>–î–µ–Ω—å {d}</option>)}
            <option value="*">–≤—Å–µ –¥–Ω–∏</option>
          </select>
          <button className="primary"
            onClick={()=>{
              if (dayPick === '*') onAddAllDays(service)
              else {
                const d = Number(dayPick)
                if (d >=1 && d <= days) onAddDay(service, d)
              }
            }}
          >
            –î–æ–±–∞–≤–∏—Ç—å
          </button>
        </>
      ) : (
        <>
          <div />
          <button className="primary" onClick={()=>onAddPerTour(service)}>–î–æ–±–∞–≤–∏—Ç—å</button>
        </>
      )}
    </div>
  )
}

// -------------------- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞) --------------------
function CenterDays({ items, days, getServiceById, onRemove }){
  return (
    <div style={{ overflow:'auto' }}>
      {Array.from({length:days}, (_,i)=> i+1).map(d => {
        const list = items.byDay[d] || []
        return (
          <div key={d} style={{ ...card, marginBottom:12 }}>
            <div style={{ display:'flex', justifyContent:'space-between', alignItems:'center' }}>
              <h4 style={{ margin:0 }}>–î–µ–Ω—å {d}</h4>
            </div>

            {list.length === 0 && (
              <div style={{ opacity:.6, fontSize:14, padding:'8px 0' }}>–ù–µ—Ç —É—Å–ª—É–≥</div>
            )}

            <div style={{ display:'flex', flexWrap:'wrap', gap:8, marginTop:8 }}>
              {list.map(it => {
                const s = getServiceById(it.serviceId)
                if (!s) return null
                return (
                  <div key={it.id} style={{
                    display:'flex', alignItems:'center', gap:8,
                    border:'1px solid #e7eef6', borderRadius:999, padding:'6px 10px', background:'#f8fbfe'
                  }}>
                    <span>{s.name_ru}</span>
                    <button className="secondary btn-sm" onClick={()=>onRemove(d, it.id)}>—É–±—Ä–∞—Ç—å</button>
                  </div>
                )
              })}
            </div>
          </div>
        )
      })}
    </div>
  )
}

// -------------------- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è —Å —Ñ–∏–∫—Å–∞–º–∏ –≤–≤–æ–¥–∞) --------------------
function RightPanel({
  days, setDays,
  singles, onSinglesChange,
  N, maxAllowed, onParticipantsChange,
  description, setDescription,
  perPersonTotal, perPersonWithAgent, groupTotal, groupTotalWithAgent, agentReward, agentPct
}){
  const [daysInput, setDaysInput] = React.useState(String(days || 1))
  const [participantsInput, setParticipantsInput] = React.useState(String(N || 1))

  React.useEffect(() => { setDaysInput(String(days || 1)) }, [days])
  React.useEffect(() => { setParticipantsInput(String(N || 1)) }, [N])

  React.useEffect(() => {
    if (maxAllowed && N > maxAllowed) {
      onParticipantsChange(maxAllowed)
      setParticipantsInput(String(maxAllowed))
    }
  }, [maxAllowed])

  function commitDays() {
    let v = parseInt((daysInput || '').replace(/\D/g, ''), 10)
    if (isNaN(v)) v = 1
    v = Math.max(1, Math.min(60, v))
    setDays(v)
    setDaysInput(String(v))
  }

  function commitParticipants() {
    let v = parseInt((participantsInput || '').replace(/\D/g, ''), 10)
    if (isNaN(v)) v = 1
    const max = Math.max(1, Number(maxAllowed || 1))
    v = Math.max(1, Math.min(max, v))
    onParticipantsChange(v)
    setParticipantsInput(String(v))
  }

  return (
    <div>
      <div style={card}>
        <h4 style={{marginTop:0}}>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—É—Ä–∞</h4>
        <div style={{display:'grid', gap:8}}>
          <label>–î–Ω–µ–π
            <input
              type="text"
              inputMode="numeric"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
              value={daysInput}
              onChange={e=>setDaysInput(e.target.value)}
              onBlur={commitDays}
              onKeyDown={e=>{ if(e.key==='Enter') commitDays() }}
            />
          </label>

          <label>Singles (–æ–¥–Ω–æ–º–µ—Å—Ç–Ω—ã—Ö)
            <input type="number" min="0" max="10" value={singles} onChange={e=>onSinglesChange(e.target.value)} />
          </label>

          <label>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å {maxAllowed})
            <input
              type="text"
              inputMode="numeric"
              placeholder={`1‚Äì${maxAllowed}`}
              value={participantsInput}
              onChange={e=>setParticipantsInput(e.target.value)}
              onBlur={commitParticipants}
              onKeyDown={e=>{ if(e.key==='Enter') commitParticipants() }}
            />
          </label>

          <label>–û–ø–∏—Å–∞–Ω–∏–µ
            <textarea rows={4} value={description} onChange={e=>setDescription(e.target.value)} placeholder="–°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: –∑–∞–º–µ—Ç–∫–∏, —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –¥–µ—Ç–∞–ª–∏..." />
          </label>
        </div>

        <hr style={{margin:'12px 0'}} />

        <div style={{display:'grid', gap:6, fontSize:14}}>
          <div>–ó–∞ —Ç—É—Ä (–Ω–∞ —á–µ–ª, –±–µ–∑ –∞–≥–µ–Ω—Ç–∞): <b>{money(perPersonTotal)}</b></div>
          <div>–ó–∞ —Ç—É—Ä (–Ω–∞ —á–µ–ª, —Å –∞–≥–µ–Ω—Ç–æ–º): <b>{money(perPersonWithAgent)}</b></div>
          <div>–ò—Ç–æ–≥–æ –ø–æ –≥—Ä—É–ø–ø–µ (–±–µ–∑ –∞–≥–µ–Ω—Ç–∞): <b>{money(groupTotal)}</b></div>
          <div>–ò—Ç–æ–≥–æ –ø–æ –≥—Ä—É–ø–ø–µ (—Å –∞–≥–µ–Ω—Ç–æ–º): <b>{money(groupTotalWithAgent)}</b></div>
          <div>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: <b>{money(agentReward)}</b> ({agentPct}%)</div>
        </div>
      </div>
    </div>
  )
}

// -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ --------------------
function cryptoRandom(){
  // –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π id –¥–ª—è UI
  if (crypto?.randomUUID) return crypto.randomUUID()
  return Math.random().toString(36).slice(2) + Date.now().toString(36)
}

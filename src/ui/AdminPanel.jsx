import React, { useEffect, useState } from 'react'
import { useNavigate, Link } from 'react-router-dom'
import { useAuth } from './store'

export default function AdminPanel(){
  const { token, isAdmin } = useAuth()
  const nav = useNavigate()
  const [services,setServices] = useState([])
  const [form,setForm] = useState({name_ru:'', type:'PER_PERSON', price:0})
  const [editing, setEditing] = useState(null) // –≤—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  useEffect(()=>{
    if(!token || !isAdmin){ nav('/admin/login') }
    else { refresh() }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  },[token,isAdmin])

  async function refresh(){
    setLoading(true); setError(null)
    try{
      const r = await fetch('/api/services', { headers: { Authorization: 'Bearer '+token } })
      const data = await r.json()
      if(!r.ok) throw new Error(data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
      setServices(data)
    }catch(e){
      setError(e.message)
    }finally{
      setLoading(false)
    }
  }

  async function addService(e){
    e.preventDefault()
    setError(null)
    const r = await fetch('/api/services',{
      method:'POST',
      headers:{'Content-Type':'application/json', Authorization:'Bearer '+token},
      body: JSON.stringify(form)
    })
    if(r.ok){
      setForm({name_ru:'', type:'PER_PERSON', price:0})
      refresh()
    } else {
      const t = await r.json().catch(()=>({}))
      alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ' + (t.error || r.status))
    }
  }

  async function delService(id){
    if(!confirm('–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É?')) return
    const r = await fetch('/api/services?id='+id,{method:'DELETE', headers:{Authorization:'Bearer '+token}})
    if(r.ok){ refresh() } else {
      const t = await r.json().catch(()=>({}))
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + (t.error || r.status))
    }
  }

  async function saveEdit(e){
    e.preventDefault()
    if(!editing) return
    const r = await fetch('/api/services?id='+editing.id, {
      method: 'PUT',
      headers: {'Content-Type':'application/json', Authorization:'Bearer '+token},
      body: JSON.stringify({
        name_ru: editing.name_ru,
        type: editing.type,
        price: Number(editing.price || 0)
      })
    })
    if(r.ok){
      setEditing(null)
      refresh()
    } else {
      const t = await r.json().catch(()=>({}))
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + (t.error || r.status))
    }
  }

  return (
    <div className="container">
      <div className="header">
        <h2>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>
        <div className="row" style={{gap:8}}>
          <Link to="/">‚Üê –ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É</Link>
          <span className="badge">–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω</span>
        </div>
      </div>

      {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ */}
      <div className="card">
        <h3>–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É</h3>
        <form onSubmit={addService}>
          <div className="row">
            <div>
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ (RU)</label>
              <input
                value={form.name_ru}
                onChange={e=>setForm({...form, name_ru:e.target.value})}
                required
              />
            </div>
            <div>
              <label>–¢–∏–ø</label>
              <select
                value={form.type}
                onChange={e=>setForm({...form, type:e.target.value})}
              >
                <option value="PER_PERSON">–Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞</option>
                <option value="PER_GROUP">–Ω–∞ –≥—Ä—É–ø–ø—É</option>
              </select>
            </div>
            <div>
              <label>–¶–µ–Ω–∞</label>
              <input
                type="number"
                step="0.01"
                value={form.price}
                onChange={e=>setForm({...form, price:Number(e.target.value||0)})}
                required
              />
            </div>
          </div>
          <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        </form>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ */}
      <div className="card">
        <h3>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥</h3>
        {loading && <div className="badge">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>}
        {error && <div className="badge">–û—à–∏–±–∫–∞: {error}</div>}
        <table className="table">
          <thead>
            <tr>
              <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
              <th>–¢–∏–ø</th>
              <th>–¶–µ–Ω–∞</th>
              <th style={{width:220}}></th>
            </tr>
          </thead>
          <tbody>
            {services.map(s=>(
              <tr key={s.id}>
                <td>{s.name_ru}</td>
                <td>{s.type==='PER_PERSON'?'–Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞':'–Ω–∞ –≥—Ä—É–ø–ø—É'}</td>
                <td>{Number(s.price).toFixed(2)}</td>
                <td>
                  <button onClick={()=>setEditing({
                    id: s.id,
                    name_ru: s.name_ru,
                    type: s.type,
                    price: Number(s.price)
                  })}>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                  <button onClick={()=>delService(s.id)}>üóë –£–¥–∞–ª–∏—Ç—å</button>
                </td>
              </tr>
            ))}
            {services.length===0 && !loading && (
              <tr><td colSpan={4} className="small">–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —É—Å–ª—É–≥—É –≤—ã—à–µ.</td></tr>
            )}
          </tbody>
        </table>
      </div>

      {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {editing && (
        <div className="card" style={{marginTop:16}}>
          <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</h3>
          <form onSubmit={saveEdit}>
            <div className="row">
              <div>
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ (RU)</label>
                <input
                  value={editing.name_ru}
                  onChange={e=>setEditing({...editing, name_ru: e.target.value})}
                  required
                />
              </div>
              <div>
                <label>–¢–∏–ø</label>
                <select
                  value={editing.type}
                  onChange={e=>setEditing({...editing, type: e.target.value})}
                >
                  <option value="PER_PERSON">–Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞</option>
                  <option value="PER_GROUP">–Ω–∞ –≥—Ä—É–ø–ø—É</option>
                </select>
              </div>
              <div>
                <label>–¶–µ–Ω–∞</label>
                <input
                  type="number"
                  step="0.01"
                  value={editing.price}
                  onChange={e=>setEditing({...editing, price: Number(e.target.value || 0)})}
                  required
                />
              </div>
            </div>
            <div className="row" style={{gap:8}}>
              <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
              <button type="button" onClick={()=>setEditing(null)}>–û—Ç–º–µ–Ω–∞</button>
            </div>
          </form>
        </div>
      )}
    </div>
  )
}
